{"version":3,"sources":["webpack:///./src/App.tsx","webpack:///./assets/default_avatar.jpg","webpack:///./src/FaceitApi.ts","webpack:///./src/InfiniteScroll.ts","webpack:///./src/Util.tsx","webpack:///./src/style.scss?75ba","webpack:///./src/style.scss"],"names":["Search","searchResultsElementRef","useRef","useState","scrollPosition","setScrollPosition","useEffect","sub","fromScrollEvents","subscribe","e","unsubscribe","input","setInput","searchTerm$","useObservable","inputs$","pipe","pluckFirst","filter","length","debounceTime","tapLog","scrolledNearBottom$","flatMap","optPosition","of","EMPTY","scrollTop","scrollTopMax","Math","max","results$","identity","switchMap","searchTerm","offset$","BehaviorSubject","searchTrigger$","startWith","zip","offset","searchPlayer","tap","response","items","complete","next","end","map","scan","acc","concat","deduplicateResults","results","setResults","useSubscription","className","type","onChange","currentTarget","value","ref","result","SearchResultPlayer","key","player_id","idSet","Set","noDuplicates","forEach","r","has","add","push","Link","to","src","avatar","nickname","PlayerDetails","playerId","useParams","player$","$inputs","getPlayer","showJson","setShowJson","player","useObservableState","country","href","steam_id_64","games","csgo","faceit_elo","onClick","DebugValue","name","MatchList","matches$","getMatchHistory","matches","match","Match","match_id","matchId","match$","getMatch","version","MatchV2","MatchV1","time","isInTeam","team","roster","find","p","TeamName","open","setOpen","winnerTeam","teams","winner","winOrLoss","faction1","faction2","started_at","DateTime","fromSeconds","toRelative","MatchV2Details","playerList","render","HashRouter","Route","path","document","getElementById","callApi","method","params","url","searchParams","URLSearchParams","Object","entries","append","toString","mkQueryString","Observable","observer","abortController","AbortController","requestDone","fetch","headers","signal","then","err","error","console","log","abort","limit","game","String","from","json","jsonEquals","a","b","JSON","stringify","elementRef","merge","element","current","fromEvent","window","throttleTime","interval","scrollHeight","clientHeight","distinctUntilChanged","api","content","__esModule","default","module","i","options","exports","locals","___CSS_LOADER_API_IMPORT___"],"mappings":"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","file":"0.bundle.f9b878796e6d2d224e62.js","sourcesContent":["import React, {useEffect, useRef, useState} from \"react\"\nimport {render} from \"react-dom\"\nimport {DateTime} from \"luxon\"\nimport {HashRouter, Link, Route, useParams} from \"react-router-dom\"\nimport {BehaviorSubject, EMPTY, identity, Observable, of, OperatorFunction, zip} from \"rxjs\"\nimport {debounceTime, filter, flatMap, map, scan, startWith, switchMap, tap} from \"rxjs/operators\"\nimport {pluckFirst, useObservable, useObservableState, useSubscription} from \"observable-hooks\"\n\nimport DefaultAvatar from \"../assets/default_avatar.jpg\"\n\nimport {\n  getMatch,\n  getMatchHistory,\n  getPlayer,\n  GetSearchPlayersResponse$Player,\n  searchPlayer,\n  GetMatchResponse$MatchV2,\n  GetMatchResponse$MatchV2$Faction,\n  GetMatchResponse$MatchV1,\n  GetPlayerResponse\n} from \"./FaceitApi.ts\"\nimport {fromScrollEvents, ScrollPosition} from \"./InfiniteScroll.ts\"\nimport {DebugValue, tapLog} from \"./Util.tsx\"\n\nimport \"./style.scss\"\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Search />\n      <div className=\"main-content\">\n        <Route path=\"/player/:playerId\">\n          <PlayerDetails />\n        </Route>\n      </div>\n    </HashRouter>\n  )\n}\n\nfunction Search() {\n  const PAGE_SIZE = 100\n\n  const searchResultsElementRef = useRef<HTMLUListElement>(null)\n\n  const [scrollPosition, setScrollPosition] = useState<ScrollPosition>()\n  useEffect(() => {\n    const sub = fromScrollEvents(searchResultsElementRef)\n      .subscribe((e: ScrollPosition) => setScrollPosition(e))\n    return () => sub.unsubscribe()\n  }, [searchResultsElementRef])\n\n  const [input, setInput] = useState(\"\")\n  const searchTerm$: Observable<string> = useObservable(\n    inputs$ => inputs$.pipe(\n      pluckFirst,\n      filter(input => input.length >= 3),\n      debounceTime(300),\n      tapLog(\"searchTerm\")\n    ),\n    [input]\n  )\n\n  const scrolledNearBottom$ = useObservable(inputs$ =>\n    inputs$.pipe(\n      pluckFirst,\n      // Skip undefined positions\n      flatMap(optPosition => optPosition ? of(optPosition) : EMPTY),\n      filter(({scrollTop, scrollTopMax}: ScrollPosition) => {\n        const distanceToBottomBeforeLoadingMore = 500\n        const loadMorePoint = Math.max(0, scrollTopMax - distanceToBottomBeforeLoadingMore)\n        return scrollTop >= loadMorePoint\n      })\n    ),\n    [scrollPosition]\n  )\n\n  function concatArraysFromStream<T extends unknown>(): OperatorFunction<T[], T[]> {\n    return scan((acc: T[], next) => acc.concat(next), [])\n  }\n\n  const results$: Observable<GetSearchPlayersResponse$Player[]> = useObservable(\n    inputs$ => inputs$.pipe(pluckFirst, flatMap(identity)).pipe(\n      // Generate stream of result batches\n      switchMap((searchTerm: string): Observable<GetSearchPlayersResponse$Player[]> => {\n        // Because fetching more results both consumes and produces offset$ values we have to use BehaviorSubject\n        // to be able to push new values from wherever.\n        // Simple recursive search with concatMap would work if we always eventually wanted all search results.\n        // However here we want to fetch results only once at start and when scrolling near bottom of the list.\n        const offset$ = new BehaviorSubject<number>(0)\n\n        const searchTrigger$ = scrolledNearBottom$.pipe(startWith())\n        const resultPages$ = zip(offset$, searchTrigger$).pipe(\n          // We only care about the offset value\n          pluckFirst,\n          tapLog(\"offset\"),\n          flatMap(offset => searchPlayer(searchTerm, offset, PAGE_SIZE)),\n          // Publish next offset or complete the stream if no more results are available\n          tap(response => response.items.length === 0 ? offset$.complete() : offset$.next(response.end)),\n          tapLog(\"resultPages\")\n        )\n\n        //const resultPages$ = searchRecursive(searchTerm, 0)\n        return resultPages$.pipe(\n          // Concatenate and dediplicate batches\n          map(response => response.items),\n          concatArraysFromStream(),\n          map(deduplicateResults)\n        )\n      })\n    ),\n    [searchTerm$]\n  )\n\n  const [results, setResults] = useState<GetSearchPlayersResponse$Player[]>([])\n  useSubscription(results$, setResults)\n\n  return (\n    <div className=\"search-form\">\n      <input type=\"text\" onChange={e => void setInput(e.currentTarget.value)} />\n\n      <ul className=\"search-results\" ref={searchResultsElementRef}>\n        {results.map((result) => {\n          return <SearchResultPlayer result={result} key={result.player_id} />\n        })}\n      </ul>\n    </div>\n  )\n}\n\nfunction deduplicateResults(results: GetSearchPlayersResponse$Player[]): GetSearchPlayersResponse$Player[] {\n  const idSet = new Set()\n  const noDuplicates: GetSearchPlayersResponse$Player[] = []\n  results.forEach(r => {\n    if (!idSet.has(r.player_id)) {\n      idSet.add(r.player_id)\n      noDuplicates.push(r)\n    }\n  })\n  return noDuplicates\n}\n\nfunction SearchResultPlayer({ result }: { result: GetSearchPlayersResponse$Player }) {\n  return <li className=\"search-result\">\n    <Link to={`/player/${result.player_id}`}>\n      <img className=\"avatar\" src={result.avatar === \"\" ? DefaultAvatar : result.avatar} />\n      <span className=\"nickname\">{result.nickname}</span>\n    </Link>\n  </li>\n\n}\n\nfunction PlayerDetails() {\n  const { playerId } = useParams<{ playerId: string }>()\n\n  const player$ = useObservable($inputs => $inputs.pipe(\n    pluckFirst,\n    switchMap(playerId => getPlayer(playerId))\n    ),\n    [playerId]\n  )\n\n  const [showJson, setShowJson] = useState(false)\n\n  const player: GetPlayerResponse | undefined = useObservableState<GetPlayerResponse>(player$)\n\n  if (!player || player.player_id !== playerId) {\n    return (<p>Loading...</p>)\n  } else {\n    return (\n      <>\n        <div className=\"player\">\n          <img className=\"player-avatar\" src={player.avatar === \"\" ? DefaultAvatar : player.avatar}/>\n          <div className=\"player-info\">\n            <h2>{player.nickname} ({player.country})</h2>\n            <ul>\n              <li><a href={`https://www.faceit.com/en/players/${player.nickname}`}>FACEIT profile</a></li>\n              {player.steam_id_64 && <li><a href={`https://steamcommunity.com/profiles/${player.steam_id_64}`}>Steam profile</a></li>}\n              {player.games?.csgo?.faceit_elo && <li>CS:GO elo {player.games.csgo.faceit_elo}</li>}\n            </ul>\n          </div>\n        </div>\n\n        <div>\n          <button onClick={() => setShowJson(!showJson)}>Show JSON</button>\n          {showJson && <DebugValue name=\"player\" value={player} />}\n        </div>\n\n        <MatchList playerId={player.player_id} />\n      </>\n    )\n  }\n}\n\nfunction MatchList({ playerId }: { playerId: string }) {\n  const matches$ = useObservable(inputs$ => inputs$.pipe(\n    pluckFirst,\n    switchMap(playerId => getMatchHistory(playerId, \"csgo\")),\n    map(response => response.items)\n  ), [playerId])\n  const matches = useObservableState(matches$, [])\n\n  return (\n\n    <div className=\"match-history\">\n      <h2>Match history</h2>\n      {matches.map(match => {\n        return <Match key={match.match_id} playerId={playerId} matchId={match.match_id} />\n      })}\n    </div>\n  )\n}\n\nfunction Match({ playerId, matchId }: { playerId: string, matchId: string }) {\n  const match$ = useObservable(inputs$ => inputs$.pipe(\n    pluckFirst,\n    switchMap(matchId => getMatch(matchId))\n  ), [matchId])\n\n  const match = useObservableState(match$)\n\n  if (!match || matchId !== match.match_id) {\n    return <p>Loading...</p>\n  }\n\n  return (\n    <div className={\"match\"}>\n      {match.version === 2 && <MatchV2 match={match} playerId={playerId} />}\n      {match.version === 1 && <MatchV1 match={match} playerId={playerId} />}\n\n    </div>\n  )\n}\nfunction MatchV1({ match, playerId }: { match: GetMatchResponse$MatchV1, playerId: string}) {\n  return <p>TODO</p>\n}\n\nfunction MatchV2({ match, playerId }: { match: GetMatchResponse$MatchV2, playerId: string }) {\n  const isInTeam = (team: GetMatchResponse$MatchV2$Faction, playerId: string) =>\n    team.roster.find(p => p.player_id === playerId)\n  const TeamName = ({ team }: { team: GetMatchResponse$MatchV2$Faction}) =>\n    <span className={isInTeam(team, playerId) ? \"home-team\" : \"enemy-team\"}>{team.name}</span>\n\n  const [open, setOpen] = useState(false)\n\n  const winnerTeam = match.teams[match.results.winner]\n  const isWinner = isInTeam(winnerTeam, playerId)\n  const winOrLoss = isWinner\n    ? <span className=\"win\">WIN</span>\n    : <span className=\"loss\">LOSS</span>\n\n  return (\n    <div>\n      <div className=\"match-header\" onClick={() => setOpen(!open)}>\n        <div className=\"result\">\n          <p>{winOrLoss}</p>\n        </div>\n        <div className=\"match-name\">\n          <p>\n            <TeamName team={match.teams.faction1}/> vs <TeamName team={match.teams.faction2}/>\n          </p>\n        </div>\n        <div className=\"timestamp\">\n          <p>{formatTime(match.started_at)}</p>\n        </div>\n        <div className=\"toggle\">\n          <p>{open ? <i className=\"fas fa-chevron-down\" /> : <i className=\"fas fa-chevron-right\" />}</p>\n        </div>\n      </div>\n      {open && <MatchV2Details match={match} />}\n    </div>\n  )\n}\n\nfunction MatchV2Details({ match }: { match: GetMatchResponse$MatchV2 }) {\n  const playerList = (team: GetMatchResponse$MatchV2$Faction) =>\n    <div className=\"team\">\n      <img className=\"avatar\" src={team.avatar === \"\" ? DefaultAvatar : team.avatar} />\n      <div className=\"players\">\n        <h2>{team.name}</h2>\n        <ul>\n          {team.roster.map(p =>\n            <li key={p.player_id}>{p.nickname}</li>\n          )}\n        </ul>\n      </div>\n    </div>\n\n  const [showJson, setShowJson] = useState(false)\n\n  return (\n    <div className=\"match-details\">\n      <div className=\"teams\">\n        {playerList(match.teams.faction1)}\n        {playerList(match.teams.faction2)}\n      </div>\n\n      <button onClick={() => setShowJson(!showJson)}>Show JSON</button>\n      {showJson && <DebugValue name=\"match\" value={match} />}\n    </div>\n  )\n}\n\nfunction formatTime(time: number): string {\n  return DateTime.fromSeconds(time).toRelative()!\n}\n\nrender(<App />, document.getElementById(\"app\"))\n","export default __webpack_public_path__ + \"7a2dcae25524daba0f2f1485ce5c07e3.jpg\";","import {from, observable, Observable} from \"rxjs\"\nimport {flatMap} from \"rxjs/operators\";\n\nconst API_KEY = \"82592226-3fb7-41cf-941c-7098de7d84c7\"\n\ntype QueryParams = { [key: string]: string }\n\nexport interface GetSearchPlayersResponse {\n  items: Array<GetSearchPlayersResponse$Player>\n  start: number\n  end: number\n}\n\nexport interface GetSearchPlayersResponse$Player {\n  player_id: string\n  nickname: string\n  status: string\n  games: Array<{\n    name: string\n    skill_level: string\n  }>\n  country: string\n  verified: boolean\n  avatar: string\n}\n\nexport function searchPlayer(nickname: string, offset: number, limit: number): Observable<GetSearchPlayersResponse> {\n  return callApi(\"GET\", \"/search/players\", {\n    nickname,\n    game: \"csgo\",\n    offset: String(offset),\n    limit: String(limit),\n  })\n    .pipe(flatMap(response => from(response.json())))\n}\n\nexport interface GetPlayerResponse {\n  player_id: string\n  nickname: string\n  avatar: string\n  country: string\n  cover_image: string\n  cover_featured_image: string\n  infractions: {\n    last_infraction_date: string\n    afk: number\n    leaver: number\n    qm_not_checkeding: number\n    qm_not_voted: number\n  }\n  platforms: {\n    steam: string\n  }\n  games: {\n    [key: string]: GetPlayerResponse$Game\n  }\n  settings: {\n    language: string\n  }\n  bans: unknown[]\n  new_steam_id: string\n  steam_id_64: string\n  steam_nickname: string\n  membership_type: string\n  memberships: string[]\n  faceit_url: string\n}\n\nexport interface GetPlayerResponse$Game {\n  game_profile_id: string\n  region: string\n  regions: {\n    [region: string]: {\n      selected_ladder_id: string\n    }\n  }\n  skill_level_label: string\n  game_player_id: string\n  skill_level: number\n  faceit_elo: number\n  game_player_name: string\n}\n\nexport function getPlayer(playerId: string): Observable<GetPlayerResponse> {\n  return callApi(\"GET\", `/players/${playerId}`)\n    .pipe(flatMap(response => from(response.json())))\n}\n\nexport interface GetMatchHistoryResponse {\n  items: Array<GetMatchHistoryResponse$Match>\n  start: number\n  end: number\n  from: number\n  to: number\n}\n\nexport interface GetMatchHistoryResponse$Match {\n  match_id: string\n  game_id: string\n  region: string\n  match_type: string\n  game_mode: string\n  max_players: number\n  teams_size: number\n  teams: {\n    faction1: GetMatchHistoryResponse$Faction\n    faction2: GetMatchHistoryResponse$Faction\n  }\n  playing_players: string[]\n  competition_id: string\n  competition_name: string\n  organizer_id: string\n  status: string\n  started_at: number\n  finished_at: number\n  results: {\n    winner: 'faction1' | 'faction2'\n    score: {\n      faction1: number\n      faction2: number\n    }\n  }\n  faceit_url: string\n}\n\nexport interface GetMatchHistoryResponse$Faction {\n  team_id: string\n  nickname: string\n  avatar: string\n  type: string\n  players: Array<{\n    player_id: string\n    nickname: string\n    avatar: string\n    skill_level: number\n    game_player_id: string\n    game_player_name: string\n    faceit_url: string\n  }>\n}\n\nexport function getMatchHistory(playerId: string, game: string): Observable<GetMatchHistoryResponse> {\n  return callApi(\"GET\", `/players/${playerId}/history`, { game })\n    .pipe(flatMap(response => from(response.json())))\n}\n\nexport type GetMatchResponse = GetMatchResponse$MatchV1 | GetMatchResponse$MatchV2\n\nexport interface GetMatchResponse$MatchV1 {\n  version: 1\n  match_id: string\n}\n\nexport interface GetMatchResponse$MatchV2 {\n  version: 2\n  match_id: string\n  game: string\n  region: string\n  competition_id: string\n  competition_type: string\n  competition_name: string\n  organizer_id: string\n  teams: {\n    faction1: GetMatchResponse$MatchV2$Faction\n    faction2: GetMatchResponse$MatchV2$Faction\n  }\n  voting: {\n    voted_entity_types: string[]\n    [entity_type: string]: string[] | {\n      entities: Array<{\n        class_name: string\n        game_map_id: string\n        guid: string\n        image_ld: string\n        image_sm: string\n        name: string\n      }>\n      pick: string[]\n    }\n  }\n  calculate_elo: boolean\n  configured_at: number\n  started_at: number\n  finished_at: number\n  demo_url: string[]\n  chat_room_id: string\n  best_of: number\n  results: {\n    winner: \"faction1\" | \"faction2\"\n    score: {\n      faction1: number\n      faction2: number\n    }\n  }\n  status: string\n  faceit_url: string\n}\n\nexport interface GetMatchResponse$MatchV2$Faction {\n  faction_id: string\n  leader: string\n  avatar: string\n  roster: Array<GetMatchResponse$MatchV2$Faction$Player>\n  substituted: boolean\n  name: string\n  type: string\n}\n\nexport interface GetMatchResponse$MatchV2$Faction$Player {\n  player_id: string\n  nickname: string\n  avatar: string\n  membership: string\n  game_player_id: string\n  game_player_name: string\n  game_skill_level: number\n  anticheat_required: boolean\n}\n\nexport function getMatch(matchId: string): Observable<GetMatchResponse> {\n  return callApi(\"GET\", `/matches/${matchId}`)\n    .pipe(flatMap(response => from(response.json())))\n}\n\nexport function getMatchStats(matchId: string): Observable<any> {\n  return callApi(\"GET\", `/matches/${matchId}/stats`)\n    .pipe(flatMap(response => from(response.json())))\n}\n\nfunction callApi(method: string, path: string, params?: QueryParams): Observable<Response> {\n  const url = params\n    ? `https://open.faceit.com/data/v4${path}?${mkQueryString(params)}`\n    : `https://open.faceit.com/data/v4${path}`\n  return new Observable<Response>(observer => {\n    const abortController = new AbortController()\n    let requestDone = false\n\n    fetch(url, {\n      method,\n      headers: { \"Authorization\": `Bearer ${API_KEY}` },\n      signal: abortController.signal\n    })\n    .then(response => {\n      requestDone = true\n      observer.next(response)\n      observer.complete()\n    })\n    .catch(err => {\n      observer.error(err)\n      observer.complete()\n    })\n\n    return () => {\n      if (!requestDone) {\n        console.log(`Cancelling request in progress: ${path}`)\n        abortController.abort()\n      }\n    }\n  })\n}\n\nfunction mkQueryString(params: QueryParams): string {\n  const searchParams = new URLSearchParams()\n  Object.entries(params).forEach(([key, value]) =>\n    searchParams.append(key, value))\n  return searchParams.toString()\n}\n","import {fromEvent, interval, merge, Observable} from \"rxjs\"\nimport {distinctUntilChanged, map, throttleTime} from \"rxjs/operators\"\nimport {RefObject} from \"react\"\n\nexport interface ScrollPosition {\n  scrollTop: number\n  scrollTopMax: number\n}\n\nexport function fromScrollEvents<ElementT extends HTMLElement>(elementRef: RefObject<ElementT>) {\n  return merge(\n    elementScrollChanges(elementRef.current!),\n    // Sync every second in case the user is fast scroller\n    // and I'm too lazy to properly fix the logic\n    interval(1000)\n  ).pipe(\n    map(() => getScrollPosition(elementRef.current!)),\n    distinctUntilChanged(jsonEquals)\n  )\n}\n\nfunction elementScrollChanges<ElementT extends HTMLElement>(element: ElementT): Observable<ElementT> {\n  // Take element scroll and window resize events since they both\n  // can change whether we are close to the bottom of the element or not\n  return merge(\n    fromEvent(element, \"scroll\"),\n    fromEvent(window, \"resize\")\n  ).pipe(\n    throttleTime(200),\n    map(() => element)\n  )\n}\n\nfunction jsonEquals(a: any, b: any) {\n  return JSON.stringify(a) === JSON.stringify(b)\n}\n\nfunction getScrollPosition<ElementType extends HTMLElement>(e: ElementType): ScrollPosition {\n  if (typeof window === \"undefined\")\n    return { scrollTop: 0, scrollTopMax: 0 }\n\n  return {\n    scrollTop: e.scrollTop,\n    scrollTopMax: e.scrollHeight - e.clientHeight\n  }\n}\n","import {MonoTypeOperatorFunction} from \"rxjs\"\nimport {tap} from \"rxjs/operators\"\nimport React from \"react\"\n\nexport function tapLog<T>(name: string): MonoTypeOperatorFunction<T> {\n  return tap(value => console.log(`${name}$ ->`, value))\n}\n\n\nexport function DebugValue({ name, value }: { name: string, value: any }) {\n  return (\n    <pre>{name} === {JSON.stringify(value, null, 2)}</pre>\n  )\n}\n\n","var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js!../node_modules/sass-loader/dist/cjs.js!./style.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\nexports.push([module.id, \"@import url(https://fonts.googleapis.com/css?family=Source+Sans+Pro);\"]);\n// Module\nexports.push([module.id, \"body{font-family:'Source Sans Pro', sans-serif;color:#333;background-color:#f7f7f7}.search-form{position:fixed;top:0;left:0;overflow:none;height:100%;width:300px;display:flex;flex-direction:column}.search-form input{min-height:12px;height:12px;padding:10px}.search-form .search-results{flex-grow:1;overflow-y:scroll}.search-form .search-results .search-result a{display:flex;height:32px}.search-form .search-results .search-result a .nickname{flex-grow:1;vertical-align:middle;line-height:32px}.search-form .search-results .search-result{border-bottom:1px dashed #ddd;box-sizing:border-box}.search-form .search-results .search-result .avatar{width:32px;height:32px;margin-right:10px}.search-form ul{margin:0;padding:0}.search-form li{list-style-type:none}.search-form li.selected{background-color:#eee}.main-content{margin-left:300px}.player{display:flex;flex-direction:row}.player .player-avatar{width:170px;height:170px}.player .player-info{flex-grow:1;padding-left:20px}.match{margin:10px 0;padding:5px 0}.match .match-header{display:flex;flex-direction:row}.match .match-header .result{width:100px}.match .match-header .match-name{flex-grow:1;padding-left:20px}.match .match-header .timestamp{width:150px;padding:0 20px}.match .match-header .toggle{width:16px;padding:0 20px}.match .match-details .teams{display:flex;flex-direction:row}.match .match-details .teams .team{flex-grow:1;display:flex;flex-direction:row}.match .match-details .teams .team .avatar{width:240px;height:240px}.match .match-details .teams .team .players{flex-grow:1;padding-left:20px}.match{border:1px solid #eee;background:white;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2)}.match .match-header .result{text-align:center}.match .match-header .result .win{color:green}.match .match-header .result .loss{color:red}.match .match-header .match-name{border-left:1px solid lightgray;border-right:1px solid lightgray}.match .match-header .match-name .home-team{text-decoration:underline}.match .match-header .timestamp{text-align:center}.match .match-header .toggle{text-align:center;border-left:1px solid lightgray}.match .match-details{padding:20px;border-top:1px solid lightgray}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n"],"sourceRoot":""}